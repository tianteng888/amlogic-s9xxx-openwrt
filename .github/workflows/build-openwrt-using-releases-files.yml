#=====================================================================================
# 适配s905l3a (aarch64_generic)架构的OpenWrt构建工作流
# 说明：使用指定的内核下载链接 ophub/kernel/releases/download/kernel_stable/6.12.41.tar.gz
#=====================================================================================

name: Build OpenWrt for s905l3a with fixed kernel

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_board:
        description: "设备型号"
        required: true
        default: "s905l3a"
        type: choice
          - s905l3a
          - s905l3a-cm311
          - s905l3a-m401a
      # 新增：允许指定具体内核版本，默认为6.12.41
      specific_kernel:
        description: "具体内核版本"
        required: true
        default: "6.12.41"
        type: string
      kernel_repo:
        description: "内核仓库"
        required: true
        default: "ophub/kernel"
        type: choice
          - ophub/kernel
      kernel_tag:
        description: "内核标签"
        required: true
        default: "kernel_stable"
        type: choice
          - kernel_stable
          - kernel_flippy
          - kernel_dev
          - kernel_beta

env:
  TZ: Asia/Shanghai
  ROOTFS_URL: "https://downloads.immortalwrt.org/releases/24.10.2/targets/armsr/armv8/immortalwrt-24.10.2-armsr-armv8-rootfs.tar.gz"
  TARGET_ARCH: "aarch64_generic"
  PACKAGE_REPO_BASE: "https://downloads.immortalwrt.org/releases/24.10.2/packages/aarch64_generic"

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: 检查代码仓库
        uses: actions/checkout@v4

      - name: 初始化构建环境
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            curl wget tar gzip xz-utils unzip build-essential \
            qemu-user-static binfmt-support pv lvm2 xfsprogs \
            net-tools iputils-ping jq
          
          sudo update-binfmts --enable qemu-aarch64
          sudo systemctl daemon-reload
          
          if ! which qemu-aarch64-static; then
            echo "错误：未找到qemu-aarch64-static"
            exit 1
          fi
          
          sudo timedatectl set-timezone "${TZ}"

      - name: 创建并挂载虚拟磁盘
        run: |
          mnt_size=$(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g')
          root_size=$(df -h / | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g')
          mnt_size=$(( mnt_size > 0 ? mnt_size - 1 : 10 ))
          root_size=$(( root_size > 0 ? root_size - 4 : 20 ))
          
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          
          sudo pvcreate /dev/loop6 /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          
          sudo mkfs.xfs -f -i size=512 /dev/github/runner
          
          sudo mkdir -p /builder
          sudo mount -o defaults /dev/github/runner /builder
          sudo chmod 777 /builder

      - name: 下载并验证rootfs
        id: download_rootfs
        working-directory: /builder
        run: |
          mkdir -p openwrt/rootfs
          
          echo "开始下载rootfs: ${ROOTFS_URL}"
          if ! sudo wget -c "${ROOTFS_URL}" -O openwrt/rootfs.tar.gz; then
            echo "错误：rootfs下载失败"
            exit 1
          fi
          
          if [ ! -f "openwrt/rootfs.tar.gz" ]; then
            echo "错误：rootfs文件不存在"
            exit 1
          fi
          
          echo "解压rootfs..."
          sudo tar -zxf openwrt/rootfs.tar.gz -C openwrt/rootfs
          
          rootfs_contents=$(ls openwrt/rootfs)
          if [ $(echo "$rootfs_contents" | wc -l) -eq 1 ] && [ -d "openwrt/rootfs/$rootfs_contents" ]; then
            sudo mv openwrt/rootfs/$rootfs_contents/* openwrt/rootfs/
            sudo rmdir openwrt/rootfs/$rootfs_contents
          fi
          
          sudo mkdir -p openwrt/rootfs/var/lock
          sudo chmod -R 777 openwrt/rootfs/var
          
          if [ -L "openwrt/rootfs/etc/resolv.conf" ]; then
            sudo rm -f openwrt/rootfs/etc/resolv.conf
          fi
          sudo cp /etc/resolv.conf openwrt/rootfs/etc/resolv.conf
          sudo chmod 777 openwrt/rootfs/etc/resolv.conf
          
          OPKG_PATH=$(sudo find openwrt/rootfs -name "opkg" | grep -E "/usr/bin/opkg|/bin/opkg" | head -n 1)
          if [ -z "$OPKG_PATH" ]; then
            echo "错误：未找到opkg工具"
            exit 1
          fi
          sudo chmod +x "$OPKG_PATH"
          
          echo "opkg_path=$OPKG_PATH" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 下载指定内核文件（6.12.41.tar.gz）
        id: download_kernel
        working-directory: /builder
        run: |
          mkdir -p openwrt/kernel
          # 使用用户指定的内核版本和链接
          KERNEL_VERSION="${{ inputs.specific_kernel }}"
          KERNEL_REPO="${{ inputs.kernel_repo }}"
          KERNEL_TAG="${{ inputs.kernel_tag }}"
          KERNEL_URL="https://github.com/${KERNEL_REPO}/releases/download/${KERNEL_TAG}/${KERNEL_VERSION}.tar.gz"
          
          echo "使用指定内核链接: ${KERNEL_URL}"
          
          # 下载内核
          if ! sudo wget -c "${KERNEL_URL}" -O "openwrt/kernel/${KERNEL_VERSION}.tar.gz"; then
            echo "错误：内核 ${KERNEL_VERSION} 下载失败"
            echo "请检查链接是否正确: ${KERNEL_URL}"
            exit 1
          fi
          
          # 验证文件存在性
          if [ ! -f "openwrt/kernel/${KERNEL_VERSION}.tar.gz" ]; then
            echo "错误：内核文件 ${KERNEL_VERSION}.tar.gz 不存在"
            exit 1
          fi
          
          # 解压内核
          sudo mkdir -p "openwrt/kernel/${KERNEL_VERSION}"
          sudo tar -zxf "openwrt/kernel/${KERNEL_VERSION}.tar.gz" -C "openwrt/kernel/${KERNEL_VERSION}"
          
          # 输出内核版本
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo "kernel_tags=${KERNEL_VERSION}" >> ${GITHUB_OUTPUT}

      - name: 配置opkg源
        if: ${{ steps.download_rootfs.outputs.status == 'success' && steps.download_kernel.outputs.status == 'success' }}
        run: |
          OPKG_CONF="/builder/openwrt/rootfs/etc/opkg/distfeeds.conf"
          sudo mkdir -p $(dirname $OPKG_CONF)
          
          sudo tee $OPKG_CONF << EOF
          src/gz immortalwrt_core https://downloads.immortalwrt.org/releases/24.10.2/targets/armsr/armv8/packages
          src/gz immortalwrt_base ${PACKAGE_REPO_BASE}/base
          src/gz immortalwrt_luci ${PACKAGE_REPO_BASE}/luci
          src/gz immortalwrt_packages ${PACKAGE_REPO_BASE}/packages
          src/gz immortalwrt_routing ${PACKAGE_REPO_BASE}/routing
          src/gz immortalwrt_telephony ${PACKAGE_REPO_BASE}/telephony
          EOF

      - name: 安装晶晨宝盒（如缺失）
        if: ${{ steps.download_rootfs.outputs.status == 'success' && steps.download_kernel.outputs.status == 'success' }}
        run: |
          ROOTFS_DIR="/builder/openwrt/rootfs"
          
          sudo mount -o bind /dev $ROOTFS_DIR/dev
          sudo mount -o bind /dev/pts $ROOTFS_DIR/dev/pts
          sudo mount -o bind /proc $ROOTFS_DIR/proc
          sudo mount -o bind /sys $ROOTFS_DIR/sys
          sudo mount -o bind /etc/resolv.conf $ROOTFS_DIR/etc/resolv.conf
          
          sudo cp /usr/bin/qemu-aarch64-static $ROOTFS_DIR/usr/bin/
          sudo chmod +x $ROOTFS_DIR/usr/bin/qemu-aarch64-static
          
          sudo chroot $ROOTFS_DIR /bin/sh -c "echo 'nameserver 8.8.8.8' > /etc/resolv.conf"
          sudo chroot $ROOTFS_DIR /bin/sh -c "echo 'nameserver 114.114.114.114' >> /etc/resolv.conf"
          
          retry=3
          while [ $retry -gt 0 ]; do
            if sudo chroot $ROOTFS_DIR /bin/sh -c "opkg update --no-check-certificate"; then
              break
            fi
            retry=$((retry - 1))
            sleep 5
          done
          if [ $retry -eq 0 ]; then
            echo "错误：opkg update失败"
            exit 1
          fi
          
          sudo chroot $ROOTFS_DIR /bin/sh -c "opkg install --no-check-certificate \
            luci-app-amlogic amlogic-utils openwrt-install-amlogic"
          
          sudo umount $ROOTFS_DIR/etc/resolv.conf
          sudo umount $ROOTFS_DIR/dev/pts
          sudo umount $ROOTFS_DIR/dev
          sudo umount $ROOTFS_DIR/proc
          sudo umount $ROOTFS_DIR/sys
          sudo rm -f $ROOTFS_DIR/usr/bin/qemu-aarch64-static

      - name: 打包OpenWrt镜像
        if: ${{ steps.download_rootfs.outputs.status == 'success' && steps.download_kernel.outputs.status == 'success' }}
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: /builder/openwrt/rootfs
          openwrt_board: ${{ inputs.openwrt_board }}
          openwrt_kernel: ${{ steps.download_kernel.outputs.kernel_tags }}
          kernel_repo: ${{ inputs.kernel_repo }}
          target_arch: ${{ env.TARGET_ARCH }}
          debug: false

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-s905l3a-${{ env.TARGET_ARCH }}-kernel-${{ steps.download_kernel.outputs.kernel_tags }}
          path: ${{ env.PACKAGED_OUTPUTPATH }}/*
          retention-days: 30
