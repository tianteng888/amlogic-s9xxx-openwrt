#=====================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Build OpenWrt using releases files (fixed opkg lock file error)
#=====================================================================================

name: Build OpenWrt using releases files

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "immortalwrt"
        type: choice
        options:
          - official
          - lede
          - immortalwrt
      openwrt_board:
        description: "Select device board"
        required: false
        default: "s905l3a"
        type: choice
        options:
          - s905l3a
          - s905l3a-cm311
          - s905l3a-m401a
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
      auto_kernel:
        description: "Auto use the latest kernel"
        required: false
        default: false
        type: boolean
      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "tianteng888/flippy-kernels"
        type: choice
        options:
          - ophub/kernel
          - tianteng888/flippy-kernels
      kernel_usage:
        description: "Set the tags of the kernel"
        required: false
        default: "neih"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta
          - neih

env:
  TZ: Asia/Shanghai
  ROOTFS_URL: "https://downloads.immortalwrt.org/releases/24.10.2/targets/armsr/armv8/immortalwrt-24.10.2-armsr-armv8-rootfs.tar.gz"
  KERNEL_URL: "https://github.com/tianteng888/flippy-kernels/releases/download/neih/6.12.41-flippy-93+.tar.gz"

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl wget tar gzip xz-utils unzip build-essential \
            qemu-user-static binfmt-support pv lvm2 xfsprogs
          sudo update-binfmts --enable qemu-aarch64
          sudo systemctl daemon-reload
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated disk
        run: |
          mnt_size=$(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g')
          root_size=$(df -h / | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g')
          mnt_size=$(( mnt_size > 0 ? mnt_size - 1 : 10 ))
          root_size=$(( root_size > 0 ? root_size - 4 : 20 ))
          
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6 /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs -f -i size=512 /dev/github/runner
          sudo mkdir -p /builder
          sudo mount -o defaults /dev/github/runner /builder
          sudo chmod 777 /builder

      - name: Download & verify rootfs
        id: download_rootfs
        working-directory: /builder
        run: |
          mkdir -p openwrt/rootfs
          sudo wget -c "${{ env.ROOTFS_URL }}" -O openwrt/rootfs.tar.gz
          
          if [ ! -f "openwrt/rootfs.tar.gz" ]; then
            echo "rootfs下载失败" && exit 1
          fi
          
          sudo tar -zxf openwrt/rootfs.tar.gz -C openwrt/rootfs
          rootfs_contents=$(ls openwrt/rootfs)
          if [ $(echo "$rootfs_contents" | wc -l) -eq 1 ] && [ -d "openwrt/rootfs/$rootfs_contents" ]; then
            sudo mv openwrt/rootfs/$rootfs_contents/* openwrt/rootfs/
            sudo rmdir openwrt/rootfs/$rootfs_contents
          fi
          
          # 提前创建opkg所需的目录结构
          sudo mkdir -p openwrt/rootfs/var/lock
          sudo chmod -R 777 openwrt/rootfs/var
          
          OPKG_PATH=$(sudo find openwrt/rootfs -name "opkg" | grep -E "/usr/bin/opkg|/bin/opkg" | head -n 1)
          if [ -z "$OPKG_PATH" ]; then
            echo "错误：未找到opkg"
            sudo ls -la openwrt/rootfs/usr/bin
            sudo ls -la openwrt/rootfs/bin
            exit 1
          fi
          sudo chmod +x "$OPKG_PATH"
          
          echo "找到opkg：$OPKG_PATH"
          echo "opkg_path=$OPKG_PATH" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Configure opkg sources
        if: ${{ steps.download_rootfs.outputs.status }} == 'success'
        run: |
          OPKG_CONF="/builder/openwrt/rootfs/etc/opkg/distfeeds.conf"
          sudo mkdir -p $(dirname $OPKG_CONF)
          sudo tee $OPKG_CONF << EOF
          src/gz immortalwrt_core https://downloads.immortalwrt.org/releases/24.10.2/targets/armsr/armv8/packages
          src/gz immortalwrt_base https://downloads.immortalwrt.org/releases/24.10.2/packages/aarch64_cortex-a53/base
          src/gz immortalwrt_luci https://downloads.immortalwrt.org/releases/24.10.2/packages/aarch64_cortex-a53/luci
          src/gz immortalwrt_packages https://downloads.immortalwrt.org/releases/24.10.2/packages/aarch64_cortex-a53/packages
          src/gz immortalwrt_routing https://downloads.immortalwrt.org/releases/24.10.2/packages/aarch64_cortex-a53/routing
          src/gz immortalwrt_telephony https://downloads.immortalwrt.org/releases/24.10.2/packages/aarch64_cortex-a53/telephony
          EOF

      - name: Install USB Ethernet drivers (fixed opkg lock)
        if: ${{ steps.download_rootfs.outputs.status }} == 'success'
        run: |
          ROOTFS_DIR="/builder/openwrt/rootfs"
          sudo mount -o bind /dev $ROOTFS_DIR/dev
          sudo mount -o bind /proc $ROOTFS_DIR/proc
          sudo mount -o bind /sys $ROOTFS_DIR/sys
          sudo cp /usr/bin/qemu-aarch64-static $ROOTFS_DIR/usr/bin/
          sudo chmod +x $ROOTFS_DIR/usr/bin/qemu-aarch64-static
          
          # 关键修复：确保锁文件目录存在且可写
          sudo chroot $ROOTFS_DIR /bin/sh -c "mkdir -p /var/lock && chmod 777 /var/lock"
          
          # 执行opkg命令
          sudo chroot $ROOTFS_DIR /bin/sh -c "opkg update"
          sudo chroot $ROOTFS_DIR /bin/sh -c "opkg install \
            kmod-usb-net kmod-usb-net-rtl8150 kmod-usb-net-rtl8152 \
            kmod-usb-net-asix kmod-usb-net-asix-ax88179 kmod-usb-net-dm9601-ether \
            kmod-usb-net-smsc95xx kmod-usb2 kmod-usb3 kmod-usb-xhci-hcd"
          
          sudo umount $ROOTFS_DIR/dev
          sudo umount $ROOTFS_DIR/proc
          sudo umount $ROOTFS_DIR/sys
          sudo rm -f $ROOTFS_DIR/usr/bin/qemu-aarch64-static

      - name: Download kernel
        id: download_kernel
        working-directory: /builder
        run: |
          mkdir -p openwrt/kernel
          sudo wget -c "${{ env.KERNEL_URL }}" -O openwrt/kernel/kernel.tar.gz
          if [ ! -f "openwrt/kernel/kernel.tar.gz" ]; then
            echo "内核下载失败" && exit 1
          fi
          sudo tar -zxf openwrt/kernel/kernel.tar.gz -C openwrt/kernel
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Package OpenWrt
        if: ${{ steps.download_kernel.outputs.status }} == 'success'
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: /builder/openwrt/rootfs
          openwrt_board: ${{ inputs.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          kernel_path: /builder/openwrt/kernel

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-s905l3a-24.10.2
          path: ${{ env.PACKAGED_OUTPUTPATH }}/*
          retention-days: 14
