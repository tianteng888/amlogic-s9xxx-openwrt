name: Build S905L3A ImmortalWrt 24.10.2

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/build-s905l3a.yml'

# 定义环境变量
env:
  TZ: Asia/Shanghai
  DEVICE: "s905l3a"
  IMMORTALWRT_VERSION: "24.10.2"
  KERNEL_VERSION: "6.12.41-flippy-93+"

jobs:
  build:
    runs-on: ubuntu-22.04
    # 避免在name字段直接使用env变量，改用固定描述
    name: Build OpenWrt for S905L3A
    timeout-minutes: 60

    steps:
      - name: 检查环境变量
        run: |
          # 在步骤中验证环境变量
          echo "设备型号: $DEVICE"
          echo "OpenWrt版本: $IMMORTALWRT_VERSION"
          echo "内核版本: $KERNEL_VERSION"

      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 初始化构建环境
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential libncurses5-dev zlib1g-dev \
            gawk git gettext libssl-dev xsltproc wget unzip curl file qemu-utils \
            parted dosfstools e2fsprogs

      - name: 创建工作目录
        run: |
          mkdir -p ~/openwrt/{rootfs,kernel,output}

      - name: 下载Rootfs文件
        id: download_rootfs
        run: |
          ROOTFS_URL="https://downloads.immortalwrt.org/releases/${IMMORTALWRT_VERSION}/targets/armsr/armv8/immortalwrt-${IMMORTALWRT_VERSION}-armsr-armv8-rootfs.tar.gz"
          echo "开始下载Rootfs: $ROOTFS_URL"
          wget -c --timeout=30 --tries=5 -O ~/openwrt/rootfs/rootfs.tar.gz "$ROOTFS_URL"
          
          if [ ! -f ~/openwrt/rootfs/rootfs.tar.gz ]; then
            echo "Rootfs下载失败"
            exit 1
          fi

      - name: 修复OPKG源
        run: |
          mkdir -p ~/openwrt/rootfs/tmp
          tar -zxf ~/openwrt/rootfs/rootfs.tar.gz -C ~/openwrt/rootfs/tmp
          
          cat > ~/openwrt/rootfs/tmp/etc/opkg/distfeeds.conf << EOF
          src/gz immortalwrt_core https://downloads.immortalwrt.org/releases/${IMMORTALWRT_VERSION}/targets/armsr/armv8/packages
          src/gz immortalwrt_base https://downloads.immortalwrt.org/releases/${IMMORTALWRT_VERSION}/packages/aarch64_cortex-a53/base
          src/gz immortalwrt_luci https://downloads.immortalwrt.org/releases/${IMMORTALWRT_VERSION}/packages/aarch64_cortex-a53/luci
          src/gz immortalwrt_packages https://downloads.immortalwrt.org/releases/${IMMORTALWRT_VERSION}/packages/aarch64_cortex-a53/packages
          src/gz immortalwrt_routing https://downloads.immortalwrt.org/releases/${IMMORTALWRT_VERSION}/packages/aarch64_cortex-a53/routing
          src/gz immortalwrt_telephony https://downloads.immortalwrt.org/releases/${IMMORTALWRT_VERSION}/packages/aarch64_cortex-a53/telephony
          EOF
          
          rm -f ~/openwrt/rootfs/rootfs.tar.gz
          tar -zcf ~/openwrt/rootfs/rootfs.tar.gz -C ~/openwrt/rootfs/tmp .

      - name: 下载内核文件
        id: download_kernel
        run: |
          KERNEL_URL="https://github.com/tianteng888/flippy-kernels/releases/download/neih/${KERNEL_VERSION}.tar.gz"
          echo "开始下载内核: $KERNEL_URL"
          wget -c --timeout=30 --tries=5 -O ~/openwrt/kernel/kernel.tar.gz "$KERNEL_URL"
          
          if [ ! -f ~/openwrt/kernel/kernel.tar.gz ]; then
            echo "内核下载失败"
            exit 1
          fi
          
          tar -zxf ~/openwrt/kernel/kernel.tar.gz -C ~/openwrt/kernel/

      - name: 构建镜像
        id: build_image
        run: |
          echo "开始构建${DEVICE}镜像"
          git clone https://github.com/ophub/amlogic-s9xxx-openwrt.git ~/amlogic-script
          cd ~/amlogic-script
          
          sudo bash -x build-openwrt.sh \
            -d "$DEVICE" \
            -f ~/openwrt/rootfs/rootfs.tar.gz \
            -k ~/openwrt/kernel \
            -o ~/openwrt/output \
            -t ext4 \
            -s 1024
          
          OUTPUT_FILE=$(ls ~/openwrt/output/*.img | head -n 1)
          echo "output_file=$OUTPUT_FILE" >> $GITHUB_OUTPUT

      - name: 上传构建结果
        uses: actions/upload-artifact@v4
        if: steps.build_image.outputs.output_file != ''
        with:
          name: "${{ env.DEVICE }}-immortalwrt-${{ env.IMMORTALWRT_VERSION }}"
          path: ${{ steps.build_image.outputs.output_file }}
          retention-days: 7
